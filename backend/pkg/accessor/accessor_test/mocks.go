// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/accessor/accessor.go
//
// Generated by this command:
//
//	mockgen -source ./pkg/accessor/accessor.go -package accessortest
//

// Package accessortest is a generated GoMock package.
package accessortest

import (
	reflect "reflect"
	accessor "single-window/pkg/accessor"

	gomock "go.uber.org/mock/gomock"
)

// MockIAccessor is a mock of IAccessor interface.
type MockIAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockIAccessorMockRecorder
}

// MockIAccessorMockRecorder is the mock recorder for MockIAccessor.
type MockIAccessorMockRecorder struct {
	mock *MockIAccessor
}

// NewMockIAccessor creates a new mock instance.
func NewMockIAccessor(ctrl *gomock.Controller) *MockIAccessor {
	mock := &MockIAccessor{ctrl: ctrl}
	mock.recorder = &MockIAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccessor) EXPECT() *MockIAccessorMockRecorder {
	return m.recorder
}

// CheckAccess mocks base method.
func (m *MockIAccessor) CheckAccess(role, res, act string) (accessor.AccessStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccess", role, res, act)
	ret0, _ := ret[0].(accessor.AccessStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccess indicates an expected call of CheckAccess.
func (mr *MockIAccessorMockRecorder) CheckAccess(role, res, act any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*MockIAccessor)(nil).CheckAccess), role, res, act)
}
