// Package entity provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package entity

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	SWCookieAuthScopes = "SWCookieAuth.Scopes"
)

// Defines values for DisputeRoleDisputeRole.
const (
	Complainant             DisputeRoleDisputeRole = "complainant"
	GuiltyResponsiblePerson DisputeRoleDisputeRole = "guilty_responsible_person"
	GuiltyWorker            DisputeRoleDisputeRole = "guilty_worker"
	ResponsiblePerson       DisputeRoleDisputeRole = "responsible_person"
)

// Defines values for EntityStatus.
const (
	Any    EntityStatus = "any"
	Closed EntityStatus = "closed"
	InWork EntityStatus = "in_work"
	Opened EntityStatus = "opened"
)

// Claims defines model for Claims.
type Claims struct {
	EmployeeId     *int64 `json:"employee_id,omitempty"`
	OrganizationId string `json:"organization_id"`
	UserId         string `json:"user_id"`
	UserRole       string `gorm:"column:role" json:"user_role"`
}

// CloseDispute defines model for CloseDispute.
type CloseDispute struct {
	ClosedAt           string       `json:"closed_at"`
	GuiltyWorkerNames  []string     `gorm:"type:text[]" json:"guilty_worker_names"`
	IsShortageCanceled bool         `json:"is_shortage_canceled"`
	Status             EntityStatus `json:"status"`
}

// Correspondence defines model for Correspondence.
type Correspondence struct {
	AttachmentPath   *string   `json:"attachment_path,omitempty"`
	CorrespondenceId string    `json:"correspondence_id"`
	CreatedAt        time.Time `json:"created_at"`
	MessageBody      *string   `json:"message_body,omitempty"`
	RevisionId       string    `json:"revision_id"`
	SenderId         string    `json:"sender_id"`
}

// CreateDispute defines model for CreateDispute.
type CreateDispute struct {
	ClosedAt           *time.Time   `json:"closed_at,omitempty"`
	CreatedAt          time.Time    `json:"created_at"`
	DisputeId          string       `json:"dispute_id"`
	IsArbitrInvited    bool         `json:"is_arbitr_invited"`
	IsDisputeReopened  bool         `json:"is_dispute_reopened"`
	IsShortageCanceled bool         `json:"is_shortage_canceled"`
	OrganizationId     string       `json:"organization_id"`
	ReopenedAt         *time.Time   `json:"reopened_at,omitempty"`
	ShortageId         string       `json:"shortage_id"`
	Status             EntityStatus `json:"status"`
}

// CreateMsgResponse defines model for CreateMsgResponse.
type CreateMsgResponse struct {
	MessageId string `json:"message_id"`
}

// Dispute defines model for Dispute.
type Dispute struct {
	ClosedAt                    time.Time `json:"closed_at"`
	ComplainantName             string    `json:"complainant_name"`
	CreatedAt                   time.Time `json:"created_at"`
	CurrencyCode                string    `json:"currency_code"`
	DisputeId                   string    `json:"dispute_id"`
	GoodsId                     int       `json:"goods_id"`
	GuiltyResponsiblePersonName string    `json:"guilty_responsible_person_name"`
	GuiltyWorkerNames           []string  `gorm:"type:text[]" json:"guilty_worker_names"`
	IsShortageCanceled          bool      `json:"is_shortage_canceled"`
	LostAmount                  float64   `json:"lost_amount"`
	LostreasonVal               string    `json:"lostreason_val"`
	ResponsiblePersonName       string    `json:"responsible_person_name"`
	Status                      string    `json:"status"`
	TareId                      int       `json:"tare_id"`
	TareType                    string    `json:"tare_type"`
}

// DisputeChat defines model for DisputeChat.
type DisputeChat struct {
	AttachmentPath *string   `json:"attachment_path,omitempty"`
	CreatedAt      time.Time `json:"created_at"`
	DisputeId      string    `json:"dispute_id"`
	MessageBody    *string   `json:"message_body,omitempty"`
	MessageId      string    `json:"message_id"`
	SenderId       string    `json:"sender_id"`
}

// DisputeList defines model for DisputeList.
type DisputeList struct {
	ClosedAt              *string      `json:"closed_at,omitempty"`
	ComplainantEmployeeId string       `json:"complainant_employee_id"`
	ComplainantName       string       `json:"complainant_name"`
	CreatedAt             string       `json:"created_at"`
	CurrencyCode          int64        `json:"currency_code"`
	DisputeId             string       `json:"dispute_id"`
	GoodsId               int64        `json:"goods_id"`
	LostAmount            float32      `json:"lost_amount"`
	LostreasonVal         string       `json:"lostreason_val"`
	OrganizationTitle     string       `json:"organization_title"`
	ResponsiblePersonName *string      `json:"responsible_person_name,omitempty"`
	Status                EntityStatus `json:"status"`
	TareId                int64        `json:"tare_id"`
	TareType              string       `json:"tare_type"`
}

// DisputeRole defines model for DisputeRole.
type DisputeRole struct {
	CreatedAt   time.Time              `json:"created_at"`
	DisputeId   string                 `json:"dispute_id"`
	DisputeRole DisputeRoleDisputeRole `json:"dispute_role"`
	UserId      string                 `json:"user_id"`
}

// DisputeRoleDisputeRole defines model for DisputeRole.DisputeRole.
type DisputeRoleDisputeRole string

// EntityStatus defines model for EntityStatus.
type EntityStatus string

// Message defines model for Message.
type Message struct {
	AttachmentPath  *string   `json:"attachment_path,omitempty"`
	CreatedAt       time.Time `json:"created_at"`
	DisputeId       string    `json:"dispute_id"`
	MessageBody     *string   `json:"message_body,omitempty"`
	MessageId       string    `json:"message_id"`
	Role            string    `json:"role"`
	SenderAvatarUrl string    `json:"sender_avatar_url"`
	SenderId        string    `json:"sender_id"`
	SenderName      string    `json:"sender_name"`
}

// Organization defines model for Organization.
type Organization struct {
	InnerId           int64  `json:"inner_id"`
	OrganizationCode  string `json:"organization_code"`
	OrganizationId    string `json:"organization_id"`
	OrganizationTitle string `json:"organization_title"`
}

// Revision defines model for Revision.
type Revision struct {
	ClosedAt          *time.Time   `json:"closed_at,omitempty"`
	CreatedAt         time.Time    `json:"created_at"`
	DisputeId         string       `json:"dispute_id"`
	InWorkAt          *time.Time   `json:"in_work_at,omitempty"`
	OrganizationId    string       `json:"organization_id"`
	OrganizationTitle *string      `json:"organization_title,omitempty"`
	RevisionId        string       `json:"revision_id"`
	Status            EntityStatus `json:"status"`
	WorkerId          *string      `json:"worker_id,omitempty"`
	WorkerName        *string      `json:"worker_name,omitempty"`
}

// Shortage defines model for Shortage.
type Shortage struct {
	CreatedAt    time.Time `json:"created_at"`
	CurrencyCode string    `json:"currency_code"`
	GoodsId      int       `json:"goods_id"`
	IsDisputed   bool      `json:"is_disputed"`
	LostAmount   float64   `json:"lost_amount"`
	LostreasonId float32   `json:"lostreason_id"`
	ShortageId   string    `json:"shortage_id"`
	TareId       int       `json:"tare_id"`
	TareType     string    `json:"tare_type"`
	UserId       string    `json:"user_id"`
}

// TokenData defines model for TokenData.
type TokenData struct {
	Claims Claims `json:"claims"`
	Token  string `json:"token"`
	Ttl    int    `json:"ttl"`
}

// WbxAuthCodeCheckResponse defines model for WbxAuthCodeCheckResponse.
type WbxAuthCodeCheckResponse struct {
	Error  *string `json:"error,omitempty"`
	Result int     `json:"result"`
}

// GetDisputeV1Params defines parameters for GetDisputeV1.
type GetDisputeV1Params struct {
	DisputeId *string `form:"disputeId,omitempty" json:"disputeId,omitempty"`
	GoodsId   *int    `form:"goodsId,omitempty" json:"goodsId,omitempty"`
}

// CreateDisputeV1MultipartBody defines parameters for CreateDisputeV1.
type CreateDisputeV1MultipartBody struct {
	File           *openapi_types.File `json:"file,omitempty"`
	MessageBody    string              `json:"message_body"`
	OrganizationId string              `json:"organization_id"`
	ShortageId     string              `json:"shortage_id"`
}

// CloseDisputeV1JSONBody defines parameters for CloseDisputeV1.
type CloseDisputeV1JSONBody struct {
	DisputeId       string    `json:"dispute_id"`
	GuiltyWorkerIds *[]string `json:"guilty_worker_ids,omitempty"`
}

// GetDisputesV1Params defines parameters for GetDisputesV1.
type GetDisputesV1Params struct {
	// Offset Смещение с которого необходимо получить споры
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Количество возращаемых споров
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Status Статус возвращаемых споров
	Status *EntityStatus `form:"status,omitempty" json:"status,omitempty"`
}

// CreateMessageV1MultipartBody defines parameters for CreateMessageV1.
type CreateMessageV1MultipartBody struct {
	DisputeId   string              `json:"dispute_id"`
	File        *openapi_types.File `json:"file,omitempty"`
	MessageBody *string             `json:"message_body,omitempty"`
}

// GetMessagesV1Params defines parameters for GetMessagesV1.
type GetMessagesV1Params struct {
	// Offset Смещение с которого необходимо получить сообщения
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Количество возращаемых сообщений
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// DisputeId ID спора, по которому нужно найти сообщения
	DisputeId string `form:"disputeId" json:"disputeId"`
}

// GetOrganizationsV1Params defines parameters for GetOrganizationsV1.
type GetOrganizationsV1Params struct {
	// OrganizationCode Тип организации по которому осущствляется поиск
	OrganizationCode *string `form:"organizationCode,omitempty" json:"organizationCode,omitempty"`

	// Offset Смещение с которого необходимо получить организации
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Количество возращаемых организаций
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SearchToken Токен поиска
	SearchToken *string `form:"searchToken,omitempty" json:"searchToken,omitempty"`
}

// GetRevisionV1Params defines parameters for GetRevisionV1.
type GetRevisionV1Params struct {
	RevisionId string `form:"revisionId" json:"revisionId"`
}

// CreateRevisionV1MultipartBody defines parameters for CreateRevisionV1.
type CreateRevisionV1MultipartBody struct {
	DisputeId      string              `json:"dispute_id"`
	File           *openapi_types.File `json:"file,omitempty"`
	MessageBody    string              `json:"message_body"`
	OrganizationId string              `json:"organization_id"`
}

// GetCorrespondencesV1Params defines parameters for GetCorrespondencesV1.
type GetCorrespondencesV1Params struct {
	RevisionId string `form:"revision_id" json:"revision_id"`
	Offset     *int   `form:"offset,omitempty" json:"offset,omitempty"`
	Limit      *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetRevisionsV1Params defines parameters for GetRevisionsV1.
type GetRevisionsV1Params struct {
	// DisputeId ID Спора для которого необходимо получить ревизии (если указан и disputeId, и status, то выборка осуществляется по disputeId)
	DisputeId *string `form:"disputeId,omitempty" json:"disputeId,omitempty"`

	// Offset Смещение с которого необходимо получить ревизии
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Количество возращаемых ревизий
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Status Статус возвращаемых ревизий (если указан и disputeId, и status, то выборка осуществляется по disputeId)
	Status *EntityStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetShortagesV1Params defines parameters for GetShortagesV1.
type GetShortagesV1Params struct {
	// Offset Смещение с которого необходимо получить списания
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Количество возвращаемых списаний
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// AuthUserJSONBody defines parameters for AuthUser.
type AuthUserJSONBody struct {
	Code        int    `json:"code"`
	PhoneNumber string `json:"phone_number"`
	Sticker     string `json:"sticker"`
}

// AuthUserParams defines parameters for AuthUser.
type AuthUserParams struct {
	// XRealIP IP пользователя
	XRealIP string `json:"X-Real-IP"`

	// DeviceId ID устройства пользователя
	DeviceId *string `json:"deviceId,omitempty"`

	// XRequestID ID запроса пользователя для обеспечения идемпотентности
	XRequestID *string `json:"X-Request-ID,omitempty"`

	// DeviceToken Токен устройства для отправки пушей
	DeviceToken *string `json:"deviceToken,omitempty"`

	// DeviceName Название устройства
	DeviceName *string `json:"deviceName,omitempty"`

	// WbApptype Тип приложения клиента, тип устройства для отправки пушей
	WbApptype *string `json:"wb-apptype,omitempty"`

	// WbAppversion Версия приложения клиента
	WbAppversion *string `json:"wb-appversion,omitempty"`

	// XNoSession Если метод нужен только для аутентификации по телефону, без сохранения сессии. deviceId, deviceName, deviceToken и wb-apptype в данном случае указывать не нужно
	XNoSession *bool `json:"X-No-Session,omitempty"`

	// XForwardedHost Токен устройства для отправки пушейИсходный хост, который будет выставляться в поле Domain для Cookie
	XForwardedHost *string `json:"X-Forwarded-Host,omitempty"`

	// XForwardedPath Токен устройства для отправки пушейИсходный путь, который будет выставляться в поле Path для Cookie
	XForwardedPath *string `json:"X-Forwarded-Path,omitempty"`
}

// CreateDisputeV1MultipartRequestBody defines body for CreateDisputeV1 for multipart/form-data ContentType.
type CreateDisputeV1MultipartRequestBody CreateDisputeV1MultipartBody

// CloseDisputeV1JSONRequestBody defines body for CloseDisputeV1 for application/json ContentType.
type CloseDisputeV1JSONRequestBody CloseDisputeV1JSONBody

// CreateMessageV1MultipartRequestBody defines body for CreateMessageV1 for multipart/form-data ContentType.
type CreateMessageV1MultipartRequestBody CreateMessageV1MultipartBody

// CreateRevisionV1MultipartRequestBody defines body for CreateRevisionV1 for multipart/form-data ContentType.
type CreateRevisionV1MultipartRequestBody CreateRevisionV1MultipartBody

// AuthUserJSONRequestBody defines body for AuthUser for application/json ContentType.
type AuthUserJSONRequestBody AuthUserJSONBody
