// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/interfaces.go -package usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	reflect "reflect"
	entity "single-window/internal/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockIDisputeUseCase is a mock of IDisputeUseCase interface.
type MockIDisputeUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIDisputeUseCaseMockRecorder
}

// MockIDisputeUseCaseMockRecorder is the mock recorder for MockIDisputeUseCase.
type MockIDisputeUseCaseMockRecorder struct {
	mock *MockIDisputeUseCase
}

// NewMockIDisputeUseCase creates a new mock instance.
func NewMockIDisputeUseCase(ctrl *gomock.Controller) *MockIDisputeUseCase {
	mock := &MockIDisputeUseCase{ctrl: ctrl}
	mock.recorder = &MockIDisputeUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDisputeUseCase) EXPECT() *MockIDisputeUseCaseMockRecorder {
	return m.recorder
}

// CloseDisputeV1 mocks base method.
func (m *MockIDisputeUseCase) CloseDisputeV1(claims *entity.Claims, disputeId string, guiltyWorkerIds []string) (*entity.CloseDispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseDisputeV1", claims, disputeId, guiltyWorkerIds)
	ret0, _ := ret[0].(*entity.CloseDispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseDisputeV1 indicates an expected call of CloseDisputeV1.
func (mr *MockIDisputeUseCaseMockRecorder) CloseDisputeV1(claims, disputeId, guiltyWorkerIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDisputeV1", reflect.TypeOf((*MockIDisputeUseCase)(nil).CloseDisputeV1), claims, disputeId, guiltyWorkerIds)
}

// CreateDisputeV1 mocks base method.
func (m *MockIDisputeUseCase) CreateDisputeV1(claims *entity.Claims, createDisputeReqBody *entity.CreateDisputeV1MultipartBody) (*entity.CreateDispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisputeV1", claims, createDisputeReqBody)
	ret0, _ := ret[0].(*entity.CreateDispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDisputeV1 indicates an expected call of CreateDisputeV1.
func (mr *MockIDisputeUseCaseMockRecorder) CreateDisputeV1(claims, createDisputeReqBody any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisputeV1", reflect.TypeOf((*MockIDisputeUseCase)(nil).CreateDisputeV1), claims, createDisputeReqBody)
}

// GetDisputeV1 mocks base method.
func (m *MockIDisputeUseCase) GetDisputeV1(disputeId *string, goodsId *int) (*entity.Dispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputeV1", disputeId, goodsId)
	ret0, _ := ret[0].(*entity.Dispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputeV1 indicates an expected call of GetDisputeV1.
func (mr *MockIDisputeUseCaseMockRecorder) GetDisputeV1(disputeId, goodsId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputeV1", reflect.TypeOf((*MockIDisputeUseCase)(nil).GetDisputeV1), disputeId, goodsId)
}

// GetDisputesV1 mocks base method.
func (m *MockIDisputeUseCase) GetDisputesV1(claims entity.Claims, limits, offset int, status entity.EntityStatus) ([]entity.DisputeList, *bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputesV1", claims, limits, offset, status)
	ret0, _ := ret[0].([]entity.DisputeList)
	ret1, _ := ret[1].(*bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDisputesV1 indicates an expected call of GetDisputesV1.
func (mr *MockIDisputeUseCaseMockRecorder) GetDisputesV1(claims, limits, offset, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputesV1", reflect.TypeOf((*MockIDisputeUseCase)(nil).GetDisputesV1), claims, limits, offset, status)
}

// GetShortagesV1 mocks base method.
func (m *MockIDisputeUseCase) GetShortagesV1(userId string, limits, offset int) ([]entity.Shortage, *bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortagesV1", userId, limits, offset)
	ret0, _ := ret[0].([]entity.Shortage)
	ret1, _ := ret[1].(*bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetShortagesV1 indicates an expected call of GetShortagesV1.
func (mr *MockIDisputeUseCaseMockRecorder) GetShortagesV1(userId, limits, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortagesV1", reflect.TypeOf((*MockIDisputeUseCase)(nil).GetShortagesV1), userId, limits, offset)
}

// MockIDisputeRepo is a mock of IDisputeRepo interface.
type MockIDisputeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIDisputeRepoMockRecorder
}

// MockIDisputeRepoMockRecorder is the mock recorder for MockIDisputeRepo.
type MockIDisputeRepoMockRecorder struct {
	mock *MockIDisputeRepo
}

// NewMockIDisputeRepo creates a new mock instance.
func NewMockIDisputeRepo(ctrl *gomock.Controller) *MockIDisputeRepo {
	mock := &MockIDisputeRepo{ctrl: ctrl}
	mock.recorder = &MockIDisputeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDisputeRepo) EXPECT() *MockIDisputeRepoMockRecorder {
	return m.recorder
}

// CloseDisputeV1 mocks base method.
func (m *MockIDisputeRepo) CloseDisputeV1(disputeId string, userId []string) (*entity.CloseDispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseDisputeV1", disputeId, userId)
	ret0, _ := ret[0].(*entity.CloseDispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseDisputeV1 indicates an expected call of CloseDisputeV1.
func (mr *MockIDisputeRepoMockRecorder) CloseDisputeV1(disputeId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDisputeV1", reflect.TypeOf((*MockIDisputeRepo)(nil).CloseDisputeV1), disputeId, userId)
}

// CreateDisputeV1 mocks base method.
func (m *MockIDisputeRepo) CreateDisputeV1(createDisputeReqBody *entity.CreateDisputeV1MultipartBody, userId string, disputeAttachmentPath *string) (*entity.CreateDispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisputeV1", createDisputeReqBody, userId, disputeAttachmentPath)
	ret0, _ := ret[0].(*entity.CreateDispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDisputeV1 indicates an expected call of CreateDisputeV1.
func (mr *MockIDisputeRepoMockRecorder) CreateDisputeV1(createDisputeReqBody, userId, disputeAttachmentPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisputeV1", reflect.TypeOf((*MockIDisputeRepo)(nil).CreateDisputeV1), createDisputeReqBody, userId, disputeAttachmentPath)
}

// DeleteDisputeV1 mocks base method.
func (m *MockIDisputeRepo) DeleteDisputeV1(dispute *entity.CreateDispute) (*entity.CreateDispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDisputeV1", dispute)
	ret0, _ := ret[0].(*entity.CreateDispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDisputeV1 indicates an expected call of DeleteDisputeV1.
func (mr *MockIDisputeRepoMockRecorder) DeleteDisputeV1(dispute any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDisputeV1", reflect.TypeOf((*MockIDisputeRepo)(nil).DeleteDisputeV1), dispute)
}

// GetDisputeV1 mocks base method.
func (m *MockIDisputeRepo) GetDisputeV1(disputeId *string, goodsId *int) (*entity.Dispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputeV1", disputeId, goodsId)
	ret0, _ := ret[0].(*entity.Dispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputeV1 indicates an expected call of GetDisputeV1.
func (mr *MockIDisputeRepoMockRecorder) GetDisputeV1(disputeId, goodsId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputeV1", reflect.TypeOf((*MockIDisputeRepo)(nil).GetDisputeV1), disputeId, goodsId)
}

// GetDisputesV1 mocks base method.
func (m *MockIDisputeRepo) GetDisputesV1(claims entity.Claims, limits, offset int, status entity.EntityStatus) ([]entity.DisputeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputesV1", claims, limits, offset, status)
	ret0, _ := ret[0].([]entity.DisputeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputesV1 indicates an expected call of GetDisputesV1.
func (mr *MockIDisputeRepoMockRecorder) GetDisputesV1(claims, limits, offset, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputesV1", reflect.TypeOf((*MockIDisputeRepo)(nil).GetDisputesV1), claims, limits, offset, status)
}

// GetGuiltyWorkersV1 mocks base method.
func (m *MockIDisputeRepo) GetGuiltyWorkersV1(disputeId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuiltyWorkersV1", disputeId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuiltyWorkersV1 indicates an expected call of GetGuiltyWorkersV1.
func (mr *MockIDisputeRepoMockRecorder) GetGuiltyWorkersV1(disputeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuiltyWorkersV1", reflect.TypeOf((*MockIDisputeRepo)(nil).GetGuiltyWorkersV1), disputeId)
}

// GetShortagesV1 mocks base method.
func (m *MockIDisputeRepo) GetShortagesV1(userId string, limits, offset int) ([]entity.Shortage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortagesV1", userId, limits, offset)
	ret0, _ := ret[0].([]entity.Shortage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortagesV1 indicates an expected call of GetShortagesV1.
func (mr *MockIDisputeRepoMockRecorder) GetShortagesV1(userId, limits, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortagesV1", reflect.TypeOf((*MockIDisputeRepo)(nil).GetShortagesV1), userId, limits, offset)
}

// MockIMessageUseCase is a mock of IMessageUseCase interface.
type MockIMessageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageUseCaseMockRecorder
}

// MockIMessageUseCaseMockRecorder is the mock recorder for MockIMessageUseCase.
type MockIMessageUseCaseMockRecorder struct {
	mock *MockIMessageUseCase
}

// NewMockIMessageUseCase creates a new mock instance.
func NewMockIMessageUseCase(ctrl *gomock.Controller) *MockIMessageUseCase {
	mock := &MockIMessageUseCase{ctrl: ctrl}
	mock.recorder = &MockIMessageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageUseCase) EXPECT() *MockIMessageUseCaseMockRecorder {
	return m.recorder
}

// CreateMessageV1 mocks base method.
func (m *MockIMessageUseCase) CreateMessageV1(claims *entity.Claims, createMsgReqBody entity.CreateMessageV1MultipartBody) (*entity.CreateMsgResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessageV1", claims, createMsgReqBody)
	ret0, _ := ret[0].(*entity.CreateMsgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessageV1 indicates an expected call of CreateMessageV1.
func (mr *MockIMessageUseCaseMockRecorder) CreateMessageV1(claims, createMsgReqBody any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessageV1", reflect.TypeOf((*MockIMessageUseCase)(nil).CreateMessageV1), claims, createMsgReqBody)
}

// GetMessagesV1 mocks base method.
func (m *MockIMessageUseCase) GetMessagesV1(claims *entity.Claims, disputeId string, limits, offset int) ([]entity.Message, *bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesV1", claims, disputeId, limits, offset)
	ret0, _ := ret[0].([]entity.Message)
	ret1, _ := ret[1].(*bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMessagesV1 indicates an expected call of GetMessagesV1.
func (mr *MockIMessageUseCaseMockRecorder) GetMessagesV1(claims, disputeId, limits, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesV1", reflect.TypeOf((*MockIMessageUseCase)(nil).GetMessagesV1), claims, disputeId, limits, offset)
}

// MockIMessageRepo is a mock of IMessageRepo interface.
type MockIMessageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageRepoMockRecorder
}

// MockIMessageRepoMockRecorder is the mock recorder for MockIMessageRepo.
type MockIMessageRepoMockRecorder struct {
	mock *MockIMessageRepo
}

// NewMockIMessageRepo creates a new mock instance.
func NewMockIMessageRepo(ctrl *gomock.Controller) *MockIMessageRepo {
	mock := &MockIMessageRepo{ctrl: ctrl}
	mock.recorder = &MockIMessageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageRepo) EXPECT() *MockIMessageRepoMockRecorder {
	return m.recorder
}

// CreateMessageV1 mocks base method.
func (m *MockIMessageRepo) CreateMessageV1(createMsgReqBody entity.CreateMessageV1MultipartBody, userId string, attachPath *string) (*entity.CreateMsgResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessageV1", createMsgReqBody, userId, attachPath)
	ret0, _ := ret[0].(*entity.CreateMsgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessageV1 indicates an expected call of CreateMessageV1.
func (mr *MockIMessageRepoMockRecorder) CreateMessageV1(createMsgReqBody, userId, attachPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessageV1", reflect.TypeOf((*MockIMessageRepo)(nil).CreateMessageV1), createMsgReqBody, userId, attachPath)
}

// GetMessagesV1 mocks base method.
func (m *MockIMessageRepo) GetMessagesV1(userId, disputeId string, limits, offset int) ([]entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesV1", userId, disputeId, limits, offset)
	ret0, _ := ret[0].([]entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesV1 indicates an expected call of GetMessagesV1.
func (mr *MockIMessageRepoMockRecorder) GetMessagesV1(userId, disputeId, limits, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesV1", reflect.TypeOf((*MockIMessageRepo)(nil).GetMessagesV1), userId, disputeId, limits, offset)
}

// MockIAuthUseCase is a mock of IAuthUseCase interface.
type MockIAuthUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthUseCaseMockRecorder
}

// MockIAuthUseCaseMockRecorder is the mock recorder for MockIAuthUseCase.
type MockIAuthUseCaseMockRecorder struct {
	mock *MockIAuthUseCase
}

// NewMockIAuthUseCase creates a new mock instance.
func NewMockIAuthUseCase(ctrl *gomock.Controller) *MockIAuthUseCase {
	mock := &MockIAuthUseCase{ctrl: ctrl}
	mock.recorder = &MockIAuthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthUseCase) EXPECT() *MockIAuthUseCaseMockRecorder {
	return m.recorder
}

// AuthHandle mocks base method.
func (m *MockIAuthUseCase) AuthHandle(req entity.AuthUserJSONBody, h entity.AuthUserParams) (*entity.TokenData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthHandle", req, h)
	ret0, _ := ret[0].(*entity.TokenData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthHandle indicates an expected call of AuthHandle.
func (mr *MockIAuthUseCaseMockRecorder) AuthHandle(req, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthHandle", reflect.TypeOf((*MockIAuthUseCase)(nil).AuthHandle), req, h)
}

// MockIAuthRepo is a mock of IAuthRepo interface.
type MockIAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthRepoMockRecorder
}

// MockIAuthRepoMockRecorder is the mock recorder for MockIAuthRepo.
type MockIAuthRepoMockRecorder struct {
	mock *MockIAuthRepo
}

// NewMockIAuthRepo creates a new mock instance.
func NewMockIAuthRepo(ctrl *gomock.Controller) *MockIAuthRepo {
	mock := &MockIAuthRepo{ctrl: ctrl}
	mock.recorder = &MockIAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthRepo) EXPECT() *MockIAuthRepoMockRecorder {
	return m.recorder
}

// GetUserByPhone mocks base method.
func (m *MockIAuthRepo) GetUserByPhone(phone string) (*entity.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", phone)
	ret0, _ := ret[0].(*entity.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone.
func (mr *MockIAuthRepoMockRecorder) GetUserByPhone(phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockIAuthRepo)(nil).GetUserByPhone), phone)
}

// MockIWbxAuthWebApi is a mock of IWbxAuthWebApi interface.
type MockIWbxAuthWebApi struct {
	ctrl     *gomock.Controller
	recorder *MockIWbxAuthWebApiMockRecorder
}

// MockIWbxAuthWebApiMockRecorder is the mock recorder for MockIWbxAuthWebApi.
type MockIWbxAuthWebApiMockRecorder struct {
	mock *MockIWbxAuthWebApi
}

// NewMockIWbxAuthWebApi creates a new mock instance.
func NewMockIWbxAuthWebApi(ctrl *gomock.Controller) *MockIWbxAuthWebApi {
	mock := &MockIWbxAuthWebApi{ctrl: ctrl}
	mock.recorder = &MockIWbxAuthWebApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWbxAuthWebApi) EXPECT() *MockIWbxAuthWebApiMockRecorder {
	return m.recorder
}

// CheckAuthCode mocks base method.
func (m *MockIWbxAuthWebApi) CheckAuthCode(body entity.AuthUserJSONBody, h entity.AuthUserParams) (*entity.WbxAuthCodeCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthCode", body, h)
	ret0, _ := ret[0].(*entity.WbxAuthCodeCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthCode indicates an expected call of CheckAuthCode.
func (mr *MockIWbxAuthWebApiMockRecorder) CheckAuthCode(body, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthCode", reflect.TypeOf((*MockIWbxAuthWebApi)(nil).CheckAuthCode), body, h)
}

// MockIRevisionUseCase is a mock of IRevisionUseCase interface.
type MockIRevisionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIRevisionUseCaseMockRecorder
}

// MockIRevisionUseCaseMockRecorder is the mock recorder for MockIRevisionUseCase.
type MockIRevisionUseCaseMockRecorder struct {
	mock *MockIRevisionUseCase
}

// NewMockIRevisionUseCase creates a new mock instance.
func NewMockIRevisionUseCase(ctrl *gomock.Controller) *MockIRevisionUseCase {
	mock := &MockIRevisionUseCase{ctrl: ctrl}
	mock.recorder = &MockIRevisionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRevisionUseCase) EXPECT() *MockIRevisionUseCaseMockRecorder {
	return m.recorder
}

// CreateRevisionV1 mocks base method.
func (m *MockIRevisionUseCase) CreateRevisionV1(claims *entity.Claims, body *entity.CreateRevisionV1MultipartBody) (*entity.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRevisionV1", claims, body)
	ret0, _ := ret[0].(*entity.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRevisionV1 indicates an expected call of CreateRevisionV1.
func (mr *MockIRevisionUseCaseMockRecorder) CreateRevisionV1(claims, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRevisionV1", reflect.TypeOf((*MockIRevisionUseCase)(nil).CreateRevisionV1), claims, body)
}

// GetCorrespondencesV1 mocks base method.
func (m *MockIRevisionUseCase) GetCorrespondencesV1(rev entity.GetCorrespondencesData, pag entity.Pagination) ([]entity.Correspondence, *bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorrespondencesV1", rev, pag)
	ret0, _ := ret[0].([]entity.Correspondence)
	ret1, _ := ret[1].(*bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCorrespondencesV1 indicates an expected call of GetCorrespondencesV1.
func (mr *MockIRevisionUseCaseMockRecorder) GetCorrespondencesV1(rev, pag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorrespondencesV1", reflect.TypeOf((*MockIRevisionUseCase)(nil).GetCorrespondencesV1), rev, pag)
}

// GetRevisionV1 mocks base method.
func (m *MockIRevisionUseCase) GetRevisionV1(claims *entity.Claims, revisionId string) (*entity.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevisionV1", claims, revisionId)
	ret0, _ := ret[0].(*entity.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevisionV1 indicates an expected call of GetRevisionV1.
func (mr *MockIRevisionUseCaseMockRecorder) GetRevisionV1(claims, revisionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevisionV1", reflect.TypeOf((*MockIRevisionUseCase)(nil).GetRevisionV1), claims, revisionId)
}

// GetRevisionsV1 mocks base method.
func (m *MockIRevisionUseCase) GetRevisionsV1(rev entity.GetRevisionsData, pag entity.Pagination) (*entity.PaginatedRevisions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevisionsV1", rev, pag)
	ret0, _ := ret[0].(*entity.PaginatedRevisions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevisionsV1 indicates an expected call of GetRevisionsV1.
func (mr *MockIRevisionUseCaseMockRecorder) GetRevisionsV1(rev, pag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevisionsV1", reflect.TypeOf((*MockIRevisionUseCase)(nil).GetRevisionsV1), rev, pag)
}

// MockIRevisionRepo is a mock of IRevisionRepo interface.
type MockIRevisionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRevisionRepoMockRecorder
}

// MockIRevisionRepoMockRecorder is the mock recorder for MockIRevisionRepo.
type MockIRevisionRepoMockRecorder struct {
	mock *MockIRevisionRepo
}

// NewMockIRevisionRepo creates a new mock instance.
func NewMockIRevisionRepo(ctrl *gomock.Controller) *MockIRevisionRepo {
	mock := &MockIRevisionRepo{ctrl: ctrl}
	mock.recorder = &MockIRevisionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRevisionRepo) EXPECT() *MockIRevisionRepoMockRecorder {
	return m.recorder
}

// CreateRevisionV1 mocks base method.
func (m *MockIRevisionRepo) CreateRevisionV1(body *entity.CreateRevisionV1MultipartBody, userId string, revisionAttachmentPath *string) (*entity.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRevisionV1", body, userId, revisionAttachmentPath)
	ret0, _ := ret[0].(*entity.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRevisionV1 indicates an expected call of CreateRevisionV1.
func (mr *MockIRevisionRepoMockRecorder) CreateRevisionV1(body, userId, revisionAttachmentPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRevisionV1", reflect.TypeOf((*MockIRevisionRepo)(nil).CreateRevisionV1), body, userId, revisionAttachmentPath)
}

// GetCorrespondencesV1 mocks base method.
func (m *MockIRevisionRepo) GetCorrespondencesV1(revisionId string, pag entity.Pagination) ([]entity.Correspondence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorrespondencesV1", revisionId, pag)
	ret0, _ := ret[0].([]entity.Correspondence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCorrespondencesV1 indicates an expected call of GetCorrespondencesV1.
func (mr *MockIRevisionRepoMockRecorder) GetCorrespondencesV1(revisionId, pag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorrespondencesV1", reflect.TypeOf((*MockIRevisionRepo)(nil).GetCorrespondencesV1), revisionId, pag)
}

// GetRevisionV1 mocks base method.
func (m *MockIRevisionRepo) GetRevisionV1(revisionId string) (*entity.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevisionV1", revisionId)
	ret0, _ := ret[0].(*entity.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevisionV1 indicates an expected call of GetRevisionV1.
func (mr *MockIRevisionRepoMockRecorder) GetRevisionV1(revisionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevisionV1", reflect.TypeOf((*MockIRevisionRepo)(nil).GetRevisionV1), revisionId)
}

// GetRevisionsV1 mocks base method.
func (m *MockIRevisionRepo) GetRevisionsV1(rev entity.GetRevisionsData, pag entity.Pagination) ([]entity.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevisionsV1", rev, pag)
	ret0, _ := ret[0].([]entity.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevisionsV1 indicates an expected call of GetRevisionsV1.
func (mr *MockIRevisionRepoMockRecorder) GetRevisionsV1(rev, pag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevisionsV1", reflect.TypeOf((*MockIRevisionRepo)(nil).GetRevisionsV1), rev, pag)
}

// MockIOrganizationUseCase is a mock of IOrganizationUseCase interface.
type MockIOrganizationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIOrganizationUseCaseMockRecorder
}

// MockIOrganizationUseCaseMockRecorder is the mock recorder for MockIOrganizationUseCase.
type MockIOrganizationUseCaseMockRecorder struct {
	mock *MockIOrganizationUseCase
}

// NewMockIOrganizationUseCase creates a new mock instance.
func NewMockIOrganizationUseCase(ctrl *gomock.Controller) *MockIOrganizationUseCase {
	mock := &MockIOrganizationUseCase{ctrl: ctrl}
	mock.recorder = &MockIOrganizationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrganizationUseCase) EXPECT() *MockIOrganizationUseCaseMockRecorder {
	return m.recorder
}

// GetOrganizationsV1 mocks base method.
func (m *MockIOrganizationUseCase) GetOrganizationsV1(rev entity.GetOrganizationsData, pag entity.Pagination) (*entity.PaginatedOrganizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationsV1", rev, pag)
	ret0, _ := ret[0].(*entity.PaginatedOrganizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationsV1 indicates an expected call of GetOrganizationsV1.
func (mr *MockIOrganizationUseCaseMockRecorder) GetOrganizationsV1(rev, pag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationsV1", reflect.TypeOf((*MockIOrganizationUseCase)(nil).GetOrganizationsV1), rev, pag)
}

// MockIOrganizationRepo is a mock of IOrganizationRepo interface.
type MockIOrganizationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIOrganizationRepoMockRecorder
}

// MockIOrganizationRepoMockRecorder is the mock recorder for MockIOrganizationRepo.
type MockIOrganizationRepoMockRecorder struct {
	mock *MockIOrganizationRepo
}

// NewMockIOrganizationRepo creates a new mock instance.
func NewMockIOrganizationRepo(ctrl *gomock.Controller) *MockIOrganizationRepo {
	mock := &MockIOrganizationRepo{ctrl: ctrl}
	mock.recorder = &MockIOrganizationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrganizationRepo) EXPECT() *MockIOrganizationRepoMockRecorder {
	return m.recorder
}

// GetOrganizationsV1 mocks base method.
func (m *MockIOrganizationRepo) GetOrganizationsV1(rev entity.GetOrganizationsData, pag entity.Pagination) ([]entity.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationsV1", rev, pag)
	ret0, _ := ret[0].([]entity.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationsV1 indicates an expected call of GetOrganizationsV1.
func (mr *MockIOrganizationRepoMockRecorder) GetOrganizationsV1(rev, pag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationsV1", reflect.TypeOf((*MockIOrganizationRepo)(nil).GetOrganizationsV1), rev, pag)
}
